pipeline {
    any agent 
    environment {
        SONARQUBE_HOME = tool 'sonar-scanner'
        AWS_REGION = 'ap-south-1'
        AWS_ACCOUNT_ID = '654654355718'
        AWS_ECR_URL = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
        BUILD_NUMBER=${BUILD_NUMBER}
    }
    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }
        stage('Git Checkout') {
            steps {
                git branch: 'main', credentialsId: 'git-credentials', url: ''
            }
        }
        stage('SonarQube Analysis') {
            steps {
                dir('src') {
                    withSonarQubeEnv('sonar') {
                        sh '''
                        $SONARQUBE_HOME/bin/sonar-scanner \
                        -Dsonar.projectName=microservice-application  \
                        -Dsonar.projectKey=microservice-application  \
                        '''
                    }
                }
            }
        }
        stage("Quality Check") {
            steps {
                script {
                    def qualityGate = waitForQualityGate(credentialsId: 'sonar-token', id: 'microservice-application')
                    if (qualityGate.status != 'OK') {
                        error "Pipeline aborted due to quality gate failure: ${qualityGate.status}"
                    }
                }
            }
        }
        stage("Owasp Dependency Check") {
            steps {
                dir('src') {
                    dependencyCheckAnalyzer(odcInstallation: 'DPcheck', projectName: 'frontend-go1', scanPath: './frontend')
                    dependencyCheckAnalyzer(odcInstallation: 'DPcheck', projectName: 'productcatalogservice-go2', scanPath: './productcatalogservice')
                    dependencyCheckAnalyzer(odcInstallation: 'DPcheck', projectName: 'shippingservice-go3', scanPath: './shippingservice')
                    dependencyCheckAnalyzer(odcInstallation: 'DPcheck', projectName: 'checkoutservice-go4', scanPath: './checkoutservice')
                    dependencyCheckAnalyzer(odcInstallation: 'DPcheck', projectName: 'emailservice-python1', scanPath: './emailservice')
                    dependencyCheckAnalyzer(odcInstallation: 'DPcheck', projectName: 'recommendationservice-python2', scanPath: './recommendationservice')
                    dependencyCheckAnalyzer(odcInstallation: 'DPcheck', projectName: 'shoppingassistantservice-python3', scanPath: './shoppingassistantservice')
                    dependencyCheckAnalyzer(odcInstallation: 'DPcheck', projectName: 'loadgenerator-python3', scanPath: './loadgenerator')
                    dependencyCheckAnalyzer(odcInstallation: 'DPcheck', projectName: 'currencyservice-nodejs1', scanPath: './currencyservice')
                    dependencyCheckAnalyzer(odcInstallation: 'DPcheck', projectName: 'paymentservice-nodejs2', scanPath: './paymentservice')
                    dependencyCheckAnalyzer(odcInstallation: 'DPcheck', projectName: 'adservice-java', scanPath: './adservice')
                    dependencyCheckAnalyzer(odcInstallation: 'DPcheck', projectName: 'cartservice-csharp', scanPath: './cartservice/src')
                }
            }
        }
        stage("Docker Build") {
            dir('src') {
                steps {
                    script {   
                        sh ''
                        imageTag=$(grep "image: ${AWS_ECR_URL}/frontend" docker-compose.yaml | awk '{print $2}' | cut -d':' -f2)
                        echo $imageTag
                        sed -i "s/${AWS_ECR_URL}/adservice:${imageTag}/${AWS_ECR_URL}/adservice:v1.${BUILD_NUMBER}/g" docker-compose.yaml
                        sed -i "s/${AWS_ECR_URL}/cartservice:${imageTag}/${AWS_ECR_URL}/cartservice:v1.${BUILD_NUMBER}/g" docker-compose.yaml
                        sed -i "s/${AWS_ECR_URL}/checkoutservice:${imageTag}/${AWS_ECR_URL}/checkoutservice:v1.${BUILD_NUMBER}/g" docker-compose.yaml
                        sed -i "s/${AWS_ECR_URL}/currencyservice:${imageTag}/${AWS_ECR_URL}/currencyservice:v1.${BUILD_NUMBER}/g" docker-compose.yaml
                        sed -i "s/${AWS_ECR_URL}/emailservice:${imageTag}/${AWS_ECR_URL}/emailservice:v1.${BUILD_NUMBER}/g" docker-compose.yaml
                        sed -i "s/${AWS_ECR_URL}/frontend:${imageTag}/${AWS_ECR_URL}/frontend:v1.${BUILD_NUMBER}/g" docker-compose.yaml
                        sed -i "s/${AWS_ECR_URL}/loadgenerator:${imageTag}/${AWS_ECR_URL}/loadgenerator:v1.${BUILD_NUMBER}/g" docker-compose.yaml
                        sed -i "s/${AWS_ECR_URL}/paymentservice:${imageTag}/${AWS_ECR_URL}/paymentservice:v1.${BUILD_NUMBER}/g" docker-compose.yaml
                        sed -i "s/${AWS_ECR_URL}/productcatalogservice:${imageTag}/${AWS_ECR_URL}/productcatalogservice:v1.${BUILD_NUMBER}/g" docker-compose.yaml
                        sed -i "s/${AWS_ECR_URL}/recommendationservice:${imageTag}/${AWS_ECR_URL}/recommendationservice:v1.${BUILD_NUMBER}/g" docker-compose.yaml
                        sed -i "s/${AWS_ECR_URL}/shippingservice:${imageTag}/${AWS_ECR_URL}/shippingservice:v1.${BUILD_NUMBER}/g" docker-compose.yaml
                        sh 'docker-compose build'
                    }
                }
            }
        }
        stage("Trivy Scan") {
            steps {
                script {
                    sh '''
                    trivy image --exit-code 0 --severity HIGH,CRITICAL --format table -o frontend-go1.html ${AWS_ECR_URL}/frontend:latest
                    trivy image --exit-code 0 --severity HIGH,CRITICAL --format table -o productcatalogservice-go2.html ${AWS_ECR_URL}/productcatalogservice:latest
                    trivy image --exit-code 0 --severity HIGH,CRITICAL --format table -o shippingservice-go3.html ${AWS_ECR_URL}/shippingservice:latest
                    trivy image --exit-code 0 --severity HIGH,CRITICAL --format table -o checkoutservice-go4.html ${AWS_ECR_URL}/checkoutservice:latest
                    trivy image --exit-code 0 --severity HIGH,CRITICAL --format table -o emailservice-python1.html ${AWS_ECR_URL}/emailservice:latest
                    trivy image --exit-code 0 --severity HIGH,CRITICAL --format table -o recommendationservice-python2.html ${AWS_ECR_URL}/recommendationservice:latest
                    trivy image --exit-code 0 --severity HIGH,CRITICAL --format table -o shoppingassistantservice-python3.html ${AWS_ECR_URL}/shoppingassistantservice:latest
                    trivy image --exit-code 0 --severity HIGH,CRITICAL --format table -o loadgenerator-python3.html ${AWS_ECR_URL}/loadgenerator:latest
                    trivy image --exit-code 0 --severity HIGH,CRITICAL --format table -o currencyservice-nodejs1.html ${AWS_ECR_URL}/currencyservice:latest
                    trivy image --exit-code 0 --severity HIGH,CRITICAL --format table -o paymentservice-nodejs2.html ${AWS_ECR_URL}/paymentservice:latest
                    trivy image --exit-code 0 --severity HIGH,CRITICAL --format table -o adservice-java.html ${AWS_ECR_URL}/adservice:latest
                    trivy image --exit-code 0 --severity HIGH,CRITICAL --format table -o cartservice-csharp.html ${AWS_ECR_URL}/cartservice:latest
                    '''
                }
            }
        }
        stage("Docker Push") {
            steps {
                script {
                    withCredentials([string(credentialsId: 'aws-ecr-credentials', variable: 'AWS_ECR_CREDENTIALS')]) {
                        sh '''
                        echo $AWS_ECR_CREDENTIALS | docker login -u AWS --password-stdin ${AWS_ECR_URL}
                        docker-compose push
                        '''
                    }
                }
            }
        }
        stage("Git Checkout manifest repo") {
            steps {
                git branch: 'main', url: 'https://github.com/SyedAzherAli/GitOps-manifest-files.git'
            }
        }
        stage("Update manifest file") {
            environment {
                GIT_REPO_NAME = "GitOps-manifest-files"
                GIT_USER_NAME = "syedazherali"
            }
            steps {
                 dir('microservice-E-commerce') {
                    withCredentials([string(credentialsId: 'git-token', variable: 'GITHUB_TOKEN')]) {
                        sh '''
                        git config user.email "syedazherali01@gmail.com"
                        git config user.name "syedazherali"
                        
                        echo $BUILD_NUMBER
                        imageTag=$(grep "image: ${AWS_ECR_URL}/frontend" kubernetes-manifests.yaml| awk '{print $2}' | cut -d':' -f2)
                        echo $imageTag
                        sed -i "s/${AWS_ECR_URL}/adservice:${imageTag}/${AWS_ECR_URL}/adservice:v1.${BUILD_NUMBER}/g" kubernetes-manifests.yaml
                        sed -i "s/${AWS_ECR_URL}/cartservice:${imageTag}/${AWS_ECR_URL}/cartservice:v1.${BUILD_NUMBER}/g" kubernetes-manifests.yaml
                        sed -i "s/${AWS_ECR_URL}/checkoutservice:${imageTag}/${AWS_ECR_URL}/checkoutservice:v1.${BUILD_NUMBER}/g" kubernetes-manifests.yaml
                        sed -i "s/${AWS_ECR_URL}/currencyservice:${imageTag}/${AWS_ECR_URL}/currencyservice:v1.${BUILD_NUMBER}/g" kubernetes-manifests.yaml
                        sed -i "s/${AWS_ECR_URL}/emailservice:${imageTag}/${AWS_ECR_URL}/emailservice:v1.${BUILD_NUMBER}/g" kubernetes-manifests.yaml
                        sed -i "s/${AWS_ECR_URL}/frontend:${imageTag}/${AWS_ECR_URL}/frontend:v1.${BUILD_NUMBER}/g" kubernetes-manifests.yaml
                        sed -i "s/${AWS_ECR_URL}/loadgenerator:${imageTag}/${AWS_ECR_URL}/loadgenerator:v1.${BUILD_NUMBER}/g" kubernetes-manifests.yaml
                        sed -i "s/${AWS_ECR_URL}/paymentservice:${imageTag}/${AWS_ECR_URL}/paymentservice:v1.${BUILD_NUMBER}/g" kubernetes-manifests.yaml
                        sed -i "s/${AWS_ECR_URL}/productcatalogservice:${imageTag}/${AWS_ECR_URL}/productcatalogservice:v1.${BUILD_NUMBER}/g" kubernetes-manifests.yaml
                        sed -i "s/${AWS_ECR_URL}/recommendationservice:${imageTag}/${AWS_ECR_URL}/recommendationservice:v1.${BUILD_NUMBER}/g" kubernetes-manifests.yaml
                        sed -i "s/${AWS_ECR_URL}/shippingservice:${imageTag}/${AWS_ECR_URL}/shippingservice:v1.${BUILD_NUMBER}/g" kubernetes-manifests.yaml
                        git add kubernetes-manifests.yaml
                        git commit -m "Update deployment Images to version \${BUILD_NUMBER}"
                        git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                        '''
                    }
                } 
            }
        }
    }
    post {
        always {
            dependencyCheckPublisher(pattern: '**/dependency-check-report.xml')
        }
    }
}





                        
                        